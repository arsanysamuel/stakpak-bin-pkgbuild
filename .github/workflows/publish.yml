name: Publish Stakpak New Version to AUR

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:  # allow manual run

jobs:
  aur:
    runs-on: ubuntu-latest
    container: archlinux:latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -Sy --noconfirm curl jq base-devel namcap pacman-contrib git sudo openssh

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update PKGBUILD
        id: pkgbuild-update
        run: |
          set -e
          set -x

          # Check Version
          AUR_PKG_VERSION=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=stakpak-bin" | jq -r '.results[0].Version' | cut -d '-' -f 1)
          STAKPAK_RELEASE_VERSION=$(curl -s "https://api.github.com/repos/stakpak/agent/releases/latest" | jq -r .tag_name | sed 's/^v//')
          echo "STAKPAK_RELEASE_VERSION=$STAKPAK_RELEASE_VERSION" >> $GITHUB_OUTPUT

          AUR_PKG_REL=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg[]=stakpak-bin" | jq -r '.results[0].Version' | cut -d '-' -f 2)
          PKGBUILD_REL=$(grep "^pkgrel=" PKGBUILD | cut -d '=' -f 2 | cut -d "#" -f 1 | xargs)

          if [ "$STAKPAK_RELEASE_VERSION" = "$AUR_PKG_VERSION" ] && [ "$AUR_PKG_REL" = "$PKGBUILD_REL" ]; then
            echo "AUR is up to date."
            echo "UPDATE_NEEDED=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "UPDATE_NEEDED=true" >> $GITHUB_OUTPUT
          
          # Reset pkgrel to 1 for new versions
          if [ "$STAKPAK_RELEASE_VERSION" != "$AUR_PKG_VERSION" ]; then
            sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD
          fi

          # Create non-root user to run makepkg safely
          useradd -m builder
          chown -R builder:builder .

          # Remove repo readme and license
          rm README.md 2> /dev/null
          rm LICENSE 2> /dev/null

          # Update checksums and test package as 'builder'
          sudo -u builder bash -c "
            updpkgsums
            makepkg --printsrcinfo > .SRCINFO
            makepkg --noconfirm --noprogressbar
            namcap PKGBUILD
            namcap *.pkg.tar.zst
          "

          # Ownership back to root
          chown -R root:root .

      - name: Commit and Push Changes
        if: ${{ steps.pkgbuild-update.outputs.UPDATE_NEEDED == 'true' }}
        env:
          STAKPAK_RELEASE_VERSION: ${{ steps.pkgbuild-update.outputs.STAKPAK_RELEASE_VERSION }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add PKGBUILD .SRCINFO
          git commit -m "Update stakpak-bin AUR package to v${STAKPAK_RELEASE_VERSION}" || echo "No changes to commit"
          git push origin master || echo "No changes to push"

      - name: Push to AUR
        if: ${{ steps.pkgbuild-update.outputs.UPDATE_NEEDED == 'true' }}
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        run: |
          set -e
          set -x

          mkdir -p ~/.ssh

          # Save private key
          echo "$AUR_SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/aur
          chmod 600 ~/.ssh/aur

          # Add SSH config for AUR
          printf "Host aur.archlinux.org\n  IdentityFile ~/.ssh/aur\n  User aur\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n  IdentitiesOnly yes\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Configure git to use SSH with explicit key
          export GIT_SSH_COMMAND="ssh -i ~/.ssh/aur -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          
          git clone ssh://aur@aur.archlinux.org/stakpak-bin.git aur-repo
    
          # Copy updated files to AUR repo
          cp PKGBUILD .SRCINFO aur-repo/
          
          # Commit and push from AUR repo
          cd aur-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add PKGBUILD .SRCINFO
          git commit -m "Update stakpak-bin to v${STAKPAK_RELEASE_VERSION}" || echo "No changes to commit"
          git push origin master
